/*
A KBase module for interacting with Metagenomic data in KBase
*/
module MetagenomeUtils {

    /* 
      An X/Y/Z style reference
    */
    typedef string obj_ref;

    /* A boolean - 0 for false, 1 for true.
        @range (0, 1)
    */
    typedef int boolean;

    /*
      file_directory: file directory containing compressed/unpacked contig file(s) to build BinnedContig object
      assembly_ref: Metagenome assembly object reference
      binned_contig_name: BinnedContig object name
      workspace_name: the name/id of the workspace it gets saved to
    */
    typedef structure {
      string file_directory;
      obj_ref assembly_ref;
      string binned_contig_name;
      string workspace_name;
    } FileToBinnedContigParams;

    typedef structure {
      obj_ref binned_contig_obj_ref;
    } FileToBinnedContigResult;

    /*
      file_to_binned_contigs: Generating BinnedContigs ojbect from files

      input params:
      file_directory: file directory containing compressed/unpacked contig file(s) to build BinnedContig object
      assembly_ref: Metagenome assembly object reference
      binned_contig_name: BinnedContig object name
      workspace_name: the name/id of the workspace it gets saved to

      return params:
      binned_contig_obj_ref: generated result BinnedContig object reference

    */
    funcdef file_to_binned_contigs(FileToBinnedContigParams params)
        returns (FileToBinnedContigResult returnVal) authentication required;

    /*
      input_ref: BinnedContig object reference

      optional params:
      save_to_shock: saving result bin files to shock. default to True
    */
    typedef structure {
      string input_ref;
      boolean save_to_shock;
    } ExportParams;

    /*
      shock_id: saved packed file shock id
      bin_file_directory: directory that contains all bin files
    */
    typedef structure {
      string shock_id;
      string bin_file_directory;
    } ExportOutput;

    /*
      binned_contigs_to_file: Convert BinnedContig object to fasta files and pack them to shock

      required params:
      input_ref: BinnedContig object reference

      optional params:
      save_to_shock: saving result bin files to shock. default to True

      return params:
      shock_id: saved packed file shock id (None if save_to_shock is set to False)
      bin_file_directory: directory that contains all bin files
    */
    funcdef binned_contigs_to_file(ExportParams params)
        returns (ExportOutput returnVal) authentication required;

    /*
      export_binned_contigs_as_excel: Convert BinnedContig object to an excel file and pack it to shock

      required params:
      input_ref: BinnedContig object reference

      optional params:
      save_to_shock: saving result bin files to shock. default to True

      return params:
      shock_id: saved packed file shock id (None if save_to_shock is set to False)
      bin_file_directory: directory that contains all bin files
    */
    funcdef export_binned_contigs_as_excel(ExportParams params)
        returns (ExportOutput returnVal) authentication required;

    typedef structure {
      string shock_id;
      string workspace_name;
      string binned_contigs_name;
    } ImportExcelParams;

    typedef structure {
      string report_name;
      string report_ref;
      string binned_contigs_ref;
    } ImportExcelOutput;
    /*
    import_excel_as_binned_contigs: Import an excel file as BinnedContigs

    required params:
    shock_id: Excel file stored in shock
    workspace_name: the name of the workspace object gets saved to

    optional params:
    binned_contigs_name: saved BinnedContig name. 
                         Auto append timestamp from excel if not given.
    */
    funcdef import_excel_as_binned_contigs(ImportExcelParams params)
        returns (ImportExcelOutput returnVal) authentication required;

    /*
      binned_contig_obj_ref: BinnedContig object reference
      extracted_assemblies: a list of dictionaries:
            bin_id: target bin id to be extracted
      assembly_suffix: suffix appended to assembly object name
      assembly_set_name:  name for created assembly set
      workspace_name: the name of the workspace it gets saved to
    */
    typedef structure {
      obj_ref binned_contig_obj_ref;
      string extracted_assemblies;   /* comma-separated list of bin ids */
      string assembly_suffix;
      string assembly_set_name;
      string workspace_name;
    } ExtractBinAsAssemblyParams;

    /*
      assembly_ref_list: list of generated Assembly object reference
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    typedef structure {
      list <obj_ref> assembly_ref_list;
      string report_name;
      string report_ref;
      string assembly_set_ref;
    } ExtractBinAsAssemblyResult;

    /*
      extract_binned_contigs_as_assembly: extract one/multiple Bins from BinnedContigs as Assembly object

      input params:
      binned_contig_obj_ref: BinnedContig object reference
      extracted_assemblies: a list of:
            bin_id: target bin id to be extracted
            assembly_suffix: suffix appended to assembly object name
      workspace_name: the name of the workspace it gets saved to

      return params:
      assembly_ref_list: list of generated result Assembly object reference
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    funcdef extract_binned_contigs_as_assembly(ExtractBinAsAssemblyParams params)
        returns (ExtractBinAsAssemblyResult returnVal) authentication required;

    /*
      old_binned_contig_ref: Original BinnedContig object reference
      bins_to_remove: a list of bin ids to be removed
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to
    */
    typedef structure {
      obj_ref old_binned_contig_ref;
      list<string> bins_to_remove;
      string output_binned_contig_name;
      string workspace_name;
    } RemoveBinsParams;

    /*
      new_binned_contig_ref: newly created BinnedContig object referece
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    typedef structure {
      obj_ref new_binned_contig_ref;
    } RemoveBinsResult;

    /*
      remove_bins_from_binned_contig: remove a list of bins from BinnedContig object

      input params:
      old_binned_contig_ref: Original BinnedContig object reference
      bins_to_remove: a list of bin ids to be removed
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to

      return params:
      new_binned_contig_ref: newly created BinnedContig object referece
    */
    funcdef remove_bins_from_binned_contig(RemoveBinsParams params)
        returns (RemoveBinsResult returnVal) authentication required;

    /*
      old_binned_contig_ref: Original BinnedContig object reference
      bin_merges: a list of bin merges dicts
        new_bin_id: newly created bin id
        bin_to_merge: list of bins to merge
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to
    */
    typedef structure {
      obj_ref old_binned_contig_ref;
      list<mapping<string, string>> bin_merges;
      string output_binned_contig_name;
      string workspace_name;
    } MergeBinsParams;

    /*
      new_binned_contig_ref: newly created BinnedContig object referece
    */
    typedef structure {
      obj_ref new_binned_contig_ref;
    } MergeBinsResult;

    /*
      merge_bins_from_binned_contig: merge a list of bins from BinnedContig object

      input params:
      old_binned_contig_ref: Original BinnedContig object reference
      bin_merges: a list of bin merges dicts
        new_bin_id: newly created bin id
        bin_to_merge: list of bins to merge
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to

      return params:
      new_binned_contig_ref: newly created BinnedContig object referece
    */
    funcdef merge_bins_from_binned_contig(MergeBinsParams params)
        returns (MergeBinsResult returnVal) authentication required;

    /*
      old_binned_contig_ref: Original BinnedContig object reference
      bins_to_remove: a list of bin ids to be removed
      bin_merges: a list of bin merges dicts
        new_bin_id: newly created bin id
        bin_to_merge: list of bins to merge
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to
    */
    typedef structure {
      obj_ref old_binned_contig_ref;
      list<string> bins_to_remove;
      list<mapping<string, string>> bin_merges;
      string output_binned_contig_name;
      string workspace_name;
    } EditBinsParams;

    /*
      new_binned_contig_ref: newly created BinnedContig object referece
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    typedef structure {
      obj_ref new_binned_contig_ref;
      string report_name;
      string report_ref;
    } EditBinsResult;

    /*
      edit_bins_from_binned_contig: merge/remove a list of bins from BinnedContig object
                                    a wrapper method of:
                                    merge_bins_from_binned_contig
                                    remove_bins_from_binned_contig


      input params:
      old_binned_contig_ref: Original BinnedContig object reference
      bins_to_remove: a list of bin ids to be removed
      bin_merges: a list of bin merges dicts
        new_bin_id: newly created bin id
        bin_to_merge: list of bins to merge
      output_binned_contig_name: Name for the output BinnedContigs object
      workspace_name: the name of the workspace new object gets saved to

      return params:
      new_binned_contig_ref: newly created BinnedContig object referece
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    funcdef edit_bins_from_binned_contig(EditBinsParams params)
        returns (EditBinsResult returnVal) authentication required;

    /*
      ref - workspace reference to AnnotatedMetagenomeAssembly Object
      included_fields - The fields to include from the Object
      included_feature_fields - 

    */
    typedef structure {
      string ref;
      list<string> included_fields;
    } getAnnotatedMetagenomeAssemblyParams;

    typedef structure {
      list<UnspecifiedObject> genomes;
    } getAnnotatedMetagenomeAssemblyOutput;

    funcdef get_annotated_metagenome_assembly(getAnnotatedMetagenomeAssemblyParams params)
        returns (getAnnotatedMetagenomeAssemblyOutput output) authentication required;

    /*
    This function serves to abstract getting the features from an AMA object.

      ref - workspace reference to AnnotatedMetagenomeAssembly object
      feature_type - case insensitive string which filters on feature types:
            accepted feature types include:
                - "cds"
                - "gene"
                - "mrna"
                - "trna"
                - "repeat_region"
                - "rrna"


    This function returns the features of an AnnotatedMetagenomeAssembly as a list of dictionaries.
    */

    typedef structure {
      string ref;
      string feature_type;
    } getAnnotatedMetagenomeAssemblyFeaturesParams;

    typedef structure {
      list<UnspecifiedObject> features;
    } getAnnotatedMetagenomeAssemblyFeaturesOutput;

    funcdef get_annotated_metagenome_assembly_features(getAnnotatedMetagenomeAssemblyFeaturesParams params)
        returns (getAnnotatedMetagenomeAssemblyFeaturesOutput output) authentication required;

};
